[core]
	autocrlf = input
	excludesfile = ~/.config/gitignore
	preloadindex = true
	untrackedCache = true
[commit]
	gpgsign = true
[credential]
	helper = cache --timeout=3600
[gc]
	auto = 256
[init]
	defaultBranch = main
[pager]
	branch = false
[pull]
	rebase = true
[user]
	name = Stick
	email = stick@stma.is
	signingkey = 0A3BAF89EFE25F0D55C5571DEC1B22A58EEB3DFC
[alias]
	# Add All
	AA = ! git add -A && git st
	# Amend Commit
	AC = commit --amend
	# Add Patches
	AP = ! git add -p && git st
	# Add Remote
	AR = remote add
	# Add Submodule
	AS = "!f(){ git submodule add -b $(git BH) $1 $2 && git submodule update --remote; }; f"
	# Add remote URL
	AU = remote set-url --add
	# Branch Here
	BH = rev-parse --abbrev-ref HEAD
	# BRanch
	BR = branch
	# Branch information, Verbose
	BV = branch -vv
	# Commit and write the message in Editor
	CE = commit
	# Commit with Message (requires message argument)
	CM = commit -m
	# CTags
	CT = ! .git/hooks/ctags
	# CLone
	CL = clone
	# CheckOut
	CO = checkout
	# Clone with Submodules
	CS = clone --recurse-submodules
	# Check Whitespace (http://peter.eisentraut.org/blog/2014/11/04/checking-whitespace-with-git/)
	CW = ! git diff-tree --check $(git hash-object -t tree /dev/null) HEAD
	# Delete Ignored
	DI = clean -dX
	# Delete Untracked
	DU = clean -d
	# Diff Whitespace
	DW = diff --check
	# Fetch All
	FA = fetch --all
	# Fire Drill
	FD = ! git add -A && git commit -m 'wip: fire drill!' && git push
	# Fetch all with Submodules
	FS = fetch --all --recurse-submodules
	# Last Commit
	LC = log -1 HEAD
	# Log Graph
	LG = log --graph \
		--date=format-local:'%Y.%m.%d %H:%M' \
		--pretty=format:'%C(yellow)%h%Creset %an %C(cyan)%ad%Creset%Cgreen%d%Creset %s'
	# List Ignored
	LI = ls-files --others -i --exclude-standard
	# Log with Signatures
	LS = log --graph \
		--date=format-local:'%Y.%m.%d %H:%M' \
		--pretty=format:'%C(yellow)%h%Creset [%G?] %an %C(cyan)%ad%Creset%Cgreen%d%Creset %s'
	# Push (Force)
	PF = ! git push -f origin $(git bh)
	# Pull Origin
	PO = ! git pull origin $(git bh)
	# PuSh
	PS = ! git push -u origin $(git bh)
	# Push to Top
	PT = ! git fa && git ro && git ps
	# Pull Upstream
	PU = ! git pull upstream $(git bh)
	# Pull (Recurse) (requires remote to pull from as argument)
	PR = "!f(){ git pull --recurse-submodules -r \"$1\" \"$(git bh)\"; }; f"
	# Repo Clean (removes a file or set of files from all commits in a repo)
	RC = "!f(){ git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch '\"$*\" --prune-empty --tag-name-filter cat -- --all && git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin; git reflog expire --expire=now --all && git gc --prune=now; }; f"
	# Remove (Force)
	RF = "!f(){ git rm -rf \"$*\" && git status; }; f"
	# Rebase Interactively
	RI = rebase -i
	# Rebase Origin
	RO = "!f(){ git fetch origin && git rebase origin/master; }; f"
	# Rebase Upstream
	RU = "!f(){ git fetch upstream && git rebase upstream/master; }; f"
	# Remotes Verbose
	RV = remote -v
	# Stash Add
	SA = stash
	# Show Changes
	SC = diff --cached
	# Stash Pop
	SP = stash pop
	# SQuash
	SQ = ! git commit --squash=HEAD && git rebase --autosquash
	# Shrink Repo
	SR = ! git reflog expire --expire=now --all && git gc --prune=now --aggressive
	# Set up Submodules
	SS = submodule update --init --recursive --remote
	# STatus
	ST = status -sb
	# Submodule Update
	SU = submodule foreach --recursive 'git checkout master && git pull'
	# TableFlip (start over from whatever is in the remote)
	TF = "!f(){ read -r -p 'Throw it all away? [y/N]: ' -n 1 yn; printf '\n'; case $yn in [Yy]* ) git fetch --all --force --jobs 8 && git reset --hard origin/\"$(git rev-parse --abbrev-ref HEAD)\" && git clean -dfx; break;; * ) break;; esac; }; f"
	# Track Master (force local branch to track origin)
	TM = ! git branch -u origin/$(git BH)
	# Undo changes
	UC = clean -dfi
	# Un-stage
	US = reset HEAD --
