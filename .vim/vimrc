" Windows Terminal is broken.
" https://superuser.com/a/1525060
set t_u7=

" Backup, swap, and undo
set backupdir=$HOME/.cache/vim/backup//  " backups stored by full file path
set directory=$HOME/.cache/vim/swap//  " swap files stored by full file path
set undodir=$HOME/.cache/vim/undo//  " undo files stored by full file path
set history=1000  " store lots of history
set undofile  " enable persistent undo
set writebackup  " write backups before writing files

" Clipboard (wayland integration using wl-clipboard)
" https://www.reddit.com/r/Fedora/comments/ax9p9t/vim_and_system_clipboard_under_wayland/
xnoremap "+y y:call system("wl-copy", @")<cr>
nnoremap "+p :let @"=substitute(system("wl-paste --no-newline"), '<C-v><C-m>', '', 'g')<cr>p
nnoremap "*p :let @"=substitute(system("wl-paste --no-newline --primary"), '<C-v><C-m>', '', 'g')<cr>p

" Encoding (set to UTF-8 where available)
set encoding=utf-8
scriptencoding utf-8
if v:lang =~? 'utf8$'
	set fileencodings=usc-bom,utf-8
endif

" Folding
set foldlevelstart=99

" Git (vim-signify)
let g:signify_realtime = 1              " more aggressive sign updates
let g:signify_cursorhold_normal = 0     " avoid auto-saving buffer
let g:signify_cursorhold_insert = 0     " avoid auto-saving buffer
nmap <Leader>t <Plug>(signify-prev-hunk)
nmap <Leader>g <Plug>(signify-next-hunk)
highlight clear Normal
highlight Normal     cterm=bold
highlight clear SignColumn
highlight SignColumn cterm=bold
highlight clear DiffAdd
highlight DiffAdd    cterm=bold
highlight clear DiffChange
highlight DiffChange cterm=bold
highlight clear DiffDelete
highlight DiffDelete cterm=bold

" Indentation (vim-yadi)
augroup VimYadiVimrc
	" Try to auto detect and use the indentation of a file when opened.
	autocmd!
	autocmd BufRead * DetectIndent
augroup END
set autoindent
if has('autocmd')
	filetype plugin indent on
endif
highlight SpecialKey ctermfg=8|  " indentation guides are dark gray
set list listchars=tab:\│\  " indentation guide (tabs)
set tabstop=4
let g:indentLine_char_list = ['|', '¦', '┆', '┊']  " indentation guide (spaces)

" Linting (ALE) (and completion)
let g:ale_completion_enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%severity%][%linter%]% code:% %s'
let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace']}
let g:ale_fix_on_save = 1
nmap <C-k> <Plug>(ale_previous_wrap)
nmap <C-j> <Plug>(ale_next_wrap)

" Mappings
"" Insert an em-dash
inoremap <C-y> <C-v>u2014
"" Insert a timestamp
nnoremap <F2> i<C-R>=strftime("%Y-%m-%d")<CR><Esc>
inoremap <F2> <C-R>=strftime("%Y-%m-%d")<CR>
nnoremap <F3> i<C-R>=strftime("%Y-%m-%d %H:%M")<CR><Esc>
inoremap <F3> <C-R>=strftime("%Y-%m-%d %H:%M")<CR>
nnoremap <F4> i<C-R>=strftime("%Y-%m-%dT%T%z")<CR><Esc>
inoremap <F4> <C-R>=strftime("%Y-%m-%dT%T%z")<CR>
"" https://sharats.me/posts/automating-the-vim-workplace/
""" Remapping of <C-^>. If there is no alternate file, and there's no count
""" given, then switch to next file. We use `bufloaded` to check for alternate
""" buffer presence. This will ignore deleted buffers, as intended. To get
""" default behaviour, use `bufexists` in it's place.
nnoremap <silent> <C-b> :<C-u>exe v:count ? v:count . 'b' : 'b' . (bufloaded(0) ? '#' : 'n')<CR>
"" Open a terminal
nnoremap ` :terminal<CR>
nnoremap ~ :vertical terminal<CR>
"" Write the current file
nnoremap <Leader><CR> :write<CR>
"" Write the current file, and quit
nnoremap <Leader>q :wq<CR>
"" Write the current file, using sudo
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Mouse
if has('mouse')
	set mouse=a  " use the mouse in all modes
endif

" Navigation
set backspace=indent,eol,start  " backspace wraps lines
if v:version > 703 || v:version == 703 && has('patch541')
	set formatoptions+=j  " Delete comment character when joining commented lines
endif
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &runtimepath) ==# ''
	runtime! macros/matchit.vim  " use % to jump from if to endif
endif
set whichwrap=b,s,<,>,[,]  " cursor keys wrap lines

" Scrolling
set scrolloff=4      " start scrolling 4 rows away from top and bottom
set sidescrolloff=4  " start scrolling 4 columns away from edges
set sidescroll=1     " scroll one column at a time sideways

" Search
set hlsearch  " highlight searches
"" hit <Return> to clear the highlight
nnoremap <CR> :nohlsearch<CR>
if has('reltime')
	set incsearch  " search as you type
endif
set ignorecase smartcase  " ignore case unless a capital is typed

" Spelling
if has('spell')
	set spelllang=en_us
	set spellfile=$HOME/.vim/stick.utf-8.add
	set spell
	highlight clear SpellBad
	highlight SpellBad cterm=Underline ctermbg=None ctermfg=None
	highlight clear SpellCap
	highlight SpellCap cterm=Italic ctermbg=None ctermfg=None
	highlight clear SpellLocal
	highlight SpellLocal cterm=None ctermbg=None ctermfg=None
	highlight clear SpellRare
	highlight SpellRare cterm=None ctermbg=None ctermfg=None
endif

" Splits
set diffopt+=vertical  " diff splits vertically by default
set equalalways        " splits take equal space
set splitbelow         " horizontal splits will place new pane below
set splitright         " vertical splits will place new pane to the right

" Typos
command-bang Q q<bang>
command-bang QW wq<bang>
command-bang Qw wq<bang>
command-bang W w<bang>
command-bang WQ wq<bang>
command-bang Wq wq<bang>

" Visuals
set background=dark  " use dark mode syntax highlighting
set listchars+=trail:-,extends:>,precedes:<,nbsp:+  "
set showcmd  " show commands as they are typed
set wildmenu  " show completions for menu items
if has('syntax') && !exists('g:syntax_on')
	syntax enable  " apply syntax highlighting
endif
"" Conceal
set conceallevel=2 concealcursor=nc
"" Guides
set colorcolumn=80,90,100,120
highlight clear ColorColumn
highlight ColorColumn ctermbg=8|  " guide columns are dark gray
"" Line Numbers
highlight clear LineNr
highlight LineNr ctermfg=8|  " line numbers should be dark gray
set cursorline  " highlight the current line
highlight clear CursorLine
highlight clear CursorLineNr
highlight CursorLine cterm=None|  " don't highlight the line itself ...
highlight CursorLineNr ctermfg=7|  " but increase brightness on the line number
"" Status and Tab lines (lightline)
set laststatus=2  " always show the status line
set showtabline=2  " always show the tab line
set noshowmode  " showing mode is unnecessary with status line plugin
let g:lightline = {
	\ 'active': {
		\ 'left': [[ 'mode', 'paste' ],
			\ [ 'filename', 'readonly', 'modified' ]],
		\ 'right': [[ 'lineinfo' ],
			\ [ 'percent', 'wordcount' ],
			\ [ 'checking', 'warnings', 'errors', 'linter_ok' ]]
	\ },
	\ 'colorscheme' : 'soml',
	\ 'component': {
		\ 'indentstyle': '%{&expandtab?shiftwidth()." sp":"tabs"}',
		\ 'wordcount': '%{WordCount()}'
	\ },
	\ 'component_expand': {
		\ 'buffers': 'lightline#bufferline#buffers',
		\ 'checking': 'lightline#ale#checking',
		\ 'warnings': 'lightline#ale#warnings',
		\ 'errors': 'lightline#ale#errors',
		\ 'linter_ok': 'lightline#ale#ok'
	\ },
	\ 'component_type': {
		\ 'buffers': 'tabsel',
		\ 'checking': 'left',
		\ 'warnings': 'warning',
		\ 'errors': 'error',
		\ 'linter_ok': 'left'
	\ },
	\ 'tabline' : {
		\ 'left': [['buffers']],
		\ 'right': [['fileformat', 'fileencoding', 'filetype', 'indentstyle']],
	\ }}
let g:lightline#ale#indicator_checking = '...'
let g:lightline#ale#indicator_warnings = '?'
let g:lightline#ale#indicator_errors = '!'
let g:lightline#ale#indicator_ok = ''

"" Wrapping
set linebreak wrap  " wrap lines, but only on whitespace/punctuation
if v:version > 704 || v:version == 704 && has('patch338')
	set breakindent breakindentopt=min:20,shift:2,sbr
endif

"" HELP
" https://github.com/dense-analysis/ale#standard-installation
" Put these lines at the very end of your vimrc file.
" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
