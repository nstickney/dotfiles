#!/usr/bin/env bash

# Unofficial bash strict mode (http://redsymbol.net/articles/unofficial-bash-strict-mode/)
set -euo pipefail

# Sanity check
if [ ! -x "$(command -v firewall-cmd)" ]; then
	printf '%s\n' "Do you have firewalld installed?"
	exit 127
fi

# Ensure firewalld service is running
if [ -x "$(command -v systemctl)" ]; then
	systemctl restart firewalld
fi

INTERFACE="$(ip route | grep default | awk '{print $5}')"    # Main interface
INTRANET="$(ip addr | grep "$INTERFACE" | awk 'FNR==2{print $2}')" # Intranet
INTRANET_ADDR="$(echo "$INTRANET" | awk -F/ '{print $1}')"

# Turn off everything in the public zone
firewall-cmd --permanent --zone=public --remove-service=dhcpv6-client
firewall-cmd --permanent --zone=public --remove-service=ssh

# Enable the internal zone
firewall-cmd --permanent --zone=internal --add-source="$INTRANET"

# Turn off cruft in the internal zone
firewall-cmd --permanent --zone=internal --remove-service=dhcpv6-client
firewall-cmd --permanent --zone=internal --remove-service=samba-client

# Reload the new configuration
firewall-cmd --reload

# Start firewalld at boot
if [ -x "$(command -v systemctl)" ]; then
	while true; do
		read -r -p "Start firewalld at boot? [y/N]: " -n 1 yn
		echo
		case $yn in
			[Yy]* ) systemctl enable firewalld; break;;
			[Nn]* ) break;;
			"" ) break;;
		esac
	done
fi

# Print a warning about firewalld
printf '%s\n' "WARNING: firewalld provides only basic incoming protection. You are"
printf '%s\n' "    hereby advised to consider iptables (which you already have installed)"
printf '%s\n' "    or nftables for incoming AND outgoing protection, as well as more"
printf '%s\n' "    advanced configurations."
