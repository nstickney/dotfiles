#!/usr/bin/env bash

# Bash strict mode (https://github.com/alphabetum/bash-boilerplate)
set -eEuo pipefail
trap 'echo "Aborting (errexit line $LINENO). Exit code: $?" >&2' ERR

usage() {
	printf 'Usage: %s\n' "$(basename "$0")" >&2
	printf ' -h --help : display this message\n' >&2
	exit
}

user_confirm() {
	while true; do
		read -r -p "$1 [y/N]: " -n 1 yn
		printf '\n'
		case $yn in
			[Yy]* ) eval "$2"; break;;
			[Nn]* ) [ -n "${3:-}" ] && eval "$3"; break;;
			"" ) break;;
		esac
	done
}

sipt() {
	sudo iptables "$@"
}

add_bittorrent_incoming() {
	sipt -A INPUT -p tcp -m tcp --dport 8999 -j ACCEPT
	sipt -A INPUT -p udp -m udp --dport 8999 -j ACCEPT
}

add_bittorrent_rules() {
	for i in 6969 8999 51413; do
		sipt -A OUTPUT -p tcp -m tcp --dport "$i" -j ACCEPT
		sipt -A OUTPUT -p udp -m udp --dport "$i" -j ACCEPT
	done
	user_confirm 'Allow BitTorrent inbound?' add_bittorrent_incoming
}

add_minecraft_rules() {
	sipt -A OUTPUT -p tcp -m tcp --dport 25565 -j ACCEPT
	sipt -A OUTPUT -p tcp -m tcp --dport 27094 -j ACCEPT
}

add_printing_rules() {
	for i in 161 515 631; do
		sipt -A OUTPUT -p tcp -m tcp --dport "$i" -j ACCEPT
	done
}

add_openvpn_rules() {
	sipt -A OUTPUT -p tcp -m tcp --dport 1194 -j ACCEPT
	sipt -A OUTPUT -p udp -m udp --dport 1194 -j ACCEPT
}

add_outbound_ssh() {
	user_confirm 'Does this computer need outbound ssh access?' \
		'sipt -A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT'
}

add_workstation_rules() {

	# Allow ping
	sipt -A INPUT -p icmp --icmp-type 0 -j ACCEPT  # echo reply
	sipt -A INPUT -p icmp --icmp-type 3 -j ACCEPT  # unreachable
	sipt -A INPUT -p icmp --icmp-type 11 -j ACCEPT # time exceeded
	sipt -A INPUT -p icmp --icmp-type 12 -j ACCEPT # parameter problem
	sipt -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT # echo request

	# Allow needed workstation outbound access
	sipt -A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT # SSH
	sipt -A OUTPUT -p tcp -m tcp --dport 43 -j ACCEPT # WHOIS
	sipt -A OUTPUT -p tcp -m tcp --dport 873 -j ACCEPT # RSYNC
	sipt -A OUTPUT -p tcp -m tcp --dport 6697 -j ACCEPT # IRC
	sipt -A OUTPUT -p tcp -m tcp --dport 11371 -j ACCEPT # HKPS
	sipt -A OUTPUT -p udp -m udp --dport 59999 -j ACCEPT # MOSH
	user_confirm 'Does this computer use network printers?' add_printing_rules
	user_confirm 'Is this computer used to play Minecraft?' add_minecraft_rules
	user_confirm 'Is this computer used to access MongoDB?' \
		'sipt -A OUTPUT -p tcp -m tcp --dport 27017 -j ACCEPT'
	user_confirm 'Is this computer used to access ProxMox?' \
		'sipt -A OUTPUT -p tcp -m tcp --dport 8006 -j ACCEPT'
	user_confirm 'Is this computer used to access Remote Desktop (RDP)?' \
		'sipt -A OUTPUT -p tcp -m tcp --dport 3389 -j ACCEPT'
	user_confirm 'Is this computer used to access vSphere?' \
		'sipt -A OUTPUT -p tcp -m tcp --dport 9443 -j ACCEPT'
}

flush_all_rules() {
	# Clear initial rules (set all policies to ACCEPT and delete extra chains)
	sipt -P INPUT ACCEPT
	sipt -P FORWARD ACCEPT
	sipt -P OUTPUT ACCEPT
	sipt -F
	sipt -X
	
	if [ -x "$(command -v ip6tables)" ]; then
		sudo ip6tables -P INPUT ACCEPT
		sudo ip6tables -P FORWARD ACCEPT
		sudo ip6tables -P OUTPUT ACCEPT
		sudo ip6tables -F
		sudo ip6tables -X
	fi
}

save_permanent_iptables() {

	# On an Alpine machine:
	if [ -x "$(command -v rc-service)" ]; then
		sudo rc-service iptables save

	# On an Arch machine:
	elif [ -x "$(command -v pacman)" ] && \
		[ -x "$(command -v iptables-save)" ]; then
		sipt-save | sudo tee /etc/iptables/iptables.rules >/dev/null

	# On a CentOS machine:
	elif [ -x "$(command -v yum)" ] && \
		sudo yum list installed iptables-services >/dev/null 2>&1 ; then
		sudo service iptables save
	
	# On a Debian machine:
	elif [ -x "$(apt)" ] && dpkg -s iptables-persistent >/dev/null 2>&1; then
		sudo dpkg-reconfigure -y iptables-persistent
	
	# Otherwise, fail:
	else
		# Warn about non-persistence
		printf '\e[1;31mWARNING:\e[0m'
		printf ' The applied configuration is NOT PERMANENT across reboots. Please\n'
		printf "    consult your distribution's documentation to determine how best to\\n"
		printf '    persist these rules. Suggested tools include iptables-persistent,\n'
		printf '    iptables-save, or iptables-services.\n'
	fi

}

main() {
	# Sanity check
	if [ ! -x "$(command -v iptables)" ]; then
		printf 'Do you have iptables installed?\n'
		exit 127
	fi

	# firewalld sanity check
	if [ -x "$(command -v firewall-cmd)" ]; then
		printf 'firewalld conflicts with these settings.\n'
		user_confirm 'Abort setting up iptables?' 'exit 1'
	fi

	# nftables sanity check
	if [ -x "$(command -v nft)" ]; then
		printf 'You have nftables installed. It supercedes iptables.\n'
		user_confirm 'Abort setting up iptables?' 'exit 1'
	fi

	# sudo check
	if [ ! -x "$(command -v sudo)" ]; then
		printf '%s\n' "This script requires sudo." >&2
		exit 127
	fi

	# Don't run with sudo! Need to preserve $SSH_CLIENT in some situations
	if (( "$(id -u)" == 0 )) && [ -n "$SUDO_COMMAND" ]; then
		printf 'Do not run this as root (sudo); it invokes sudo as required.\n'
		exit 1
	fi

	# Find necessary information
	local _NETS
	_NETS="$(ip a | grep 'inet ' | grep -v 'inet 127\.' | \
		sed 's/  //g; s/inet //g; s/ .*//g')"

	if [ -n "${SSH_CLIENT}" ]; then
		local SSH_ADDR
		SSH_ADDR="$(echo "$SSH_CLIENT" | cut -d' ' -f1)"
	fi

	# Ensure iptables service is running
	# If this is an Alpine system, don't start iptables until the end
	[ -x "$(command -v systemctl)" ] && sudo systemctl restart iptables

	flush_all_rules

	# The "BASE" chain will be used to hold rules applied to all other chains
	sipt -N BASE
	sipt -A INPUT -j BASE
	sipt -A FORWARD -j BASE
	sipt -A OUTPUT -j BASE

	# Drop invalid connections
	sipt -A BASE -m state --state INVALID -j DROP

	# Allow established connections
	sipt -A BASE -m state --state ESTABLISHED,RELATED -j ACCEPT

	# Allow loopback in and out
	sipt -A BASE -i lo -o lo -j ACCEPT
	sipt -A BASE -s 127.0.0.0/8 -d 127.0.0.0/8 -j ACCEPT

	# Jump back after the base chain
	sipt -A BASE -j RETURN

	# Anti-lockout rule (allow SSH from current connection)
	[ -z "${SSH_ADDR+x}" ] || sipt -A INPUT -s "$SSH_ADDR" -p tcp \
		-m tcp --dport 22 -j ACCEPT

	for _NET in $_NETS; do
		local _ADDR="${_NET%%/*}"
		# Prevent host spoofing
		sipt -A INPUT -s "$_ADDR" -j DROP
		sipt -A OUTPUT -d "$_ADDR" -j DROP
		
		# Allow DHCP for faster renewals
		sipt -A INPUT -s "$_NET" -p udp -m udp --sport 67 -m udp \
			--dport 68 -j ACCEPT

		# Allow mDNS for zeroconf
		sipt -A INPUT -s "$_NET" -p udp -m udp --dport 5353 -j ACCEPT
		sipt -A OUTPUT -d "$_NET" -p udp -m udp --dport 5353 -j ACCEPT

		# Allow Mosh
		sipt -A INPUT -s "$_NET" -p udp -m udp --dport 59999 -j ACCEPT

		# Allow ping
		sipt -A INPUT -s "$_NET" -p icmp --icmp-type 8 -j ACCEPT   # req
		sipt -A OUTPUT -d "$_NET" -p icmp --icmp-type 0 -j ACCEPT  # rep

		# Allow ssh
		sipt -A INPUT -s "$_NET" -p tcp -m tcp --dport 22 -j ACCEPT
	done

	# mDNS
	sipt -A INPUT -d 224.0.0.251 -p udp -m udp --dport 5353 -j ACCEPT
	sipt -A OUTPUT -d 224.0.0.251 -p udp -m udp --dport 5353 -j ACCEPT

	# Uncomment the lines below as needed to make services available
	# sipt -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT # SSH (DANGER)
	# sipt -A INPUT -p udp -m udp --dport 53 -j ACCEPT # DNS
	# sipt -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT # HTTP
	# sipt -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT # HTTPS
	# sipt -A INPUT -p udp -m udp --dport 443 -j ACCEPT # HTTP/2
	# sipt -A INPUT -p tcp -m tcp --dport 8123 -j ACCEPT # Dynmap
	# sipt -A INPUT -p tcp -m tcp --dport 25565 -j ACCEPT # Minecraft
	# sipt -A INPUT -p udp -m udp --dport 59999 -j ACCEPT # MOSH (DANGER)

	# Allow required services outbound (TCP)
	sipt -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT # HTTP
	sipt -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT # HTTPS

	# Allow required services outbound (UDP)
	sipt -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT # DNS
	sipt -A OUTPUT -p udp -m udp --dport 443 -j ACCEPT # HTTP/2
	sipt -A OUTPUT -p udp -m udp --dport 123 -j ACCEPT # NTP

	# Allow BitTorrent?
	user_confirm 'Allow BitTorrent?' add_bittorrent_rules

	# Allow OpenVPN outbound?
	user_confirm 'Does this computer use OpenVPN?' add_openvpn_rules

	# Allow WireGuard outbound?
	user_confirm 'Does this computer use WireGuard?' \
		'sipt -A OUTPUT -p udp -m udp --dport 51820 -j ACCEPT'

	# Workstation?
	user_confirm 'Is this machine a workstation?' \
		add_workstation_rules add_outbound_ssh

	# Set default policy for all chains to DROP
	sipt -P INPUT DROP
	sipt -P FORWARD DROP
	sipt -P OUTPUT DROP

	# Also drop IPv6
	if [ -x "$(command -v ip6tables)" ]; then
		sudo ip6tables -F
		sudo ip6tables -P INPUT DROP
		sudo ip6tables -P FORWARD DROP
		sudo ip6tables -P OUTPUT DROP
	fi

	# "Cleverness" https://unix.stackexchange.com/a/104361
	sleep 1
	read -t 10 -r -p "Still connected? [y/N]: " -n 1 yn
	printf '\n'
	case $yn in
		[Yy]* ) printf 'Rules confirmed.\n';;
		[Nn]* ) flush_all_rules;;
		"" ) flush_all_rules;;
	esac
	
	# Show the result
	printf '\n\e[1;32m%s\e[0m\n\n' "IPTables rules implemented:"
	sipt -L | sed 's/^/  /'
	printf '\n'

	# Make rules persistent
	user_confirm 'Save rules persistently?' save_permanent_iptables
	# Alpine only: actually start the service
	[ -x "$(command -v rc-service)" ] && sudo rc-service iptables restart

	# Start iptables at boot
	if [ -x "$(command -v systemctl)" ]; then
		user_confirm 'Start iptables at boot?' 'sudo systemctl enable iptables'
	elif [ -x "$(command -v rc-update)" ]; then
		user_confirm 'Start iptables at boot?' 'sudo rc-update add iptables'
	fi
}


_pos_args=()
while [ "$#" -gt 0 ]; do
	case "$1" in
		'--help'|'-h') usage;;
		*) _pos_args+=("$1"); shift;;
	esac
done
main ${_pos_args[@]:+"${_pos_args[@]}"}
