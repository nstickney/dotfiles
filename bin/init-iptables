#!/bin/sh

# Bash strict mode (https://github.com/alphabetum/bash-boilerplate)
set -eu
trap flush_all_rules HUP INT QUIT TERM

usage() {
	printf 'Usage: %s\n' "$(basename "$0")" >&2
	printf ' -h --help : display this message\n' >&2
	exit
}

__get_ch() {
	# Get an answer
	if [ -n "${1:-}" ]; then
		old=$(stty -g)
		stty raw min 0 time "$1"
		printf '%s' "$(dd bs=1 count=1 2>/dev/null)"
		stty "$old"
	else
		old=$(stty -g)
		stty raw min 1 time 0
		printf '%s' "$(dd bs=1 count=1 2>/dev/null)"
		stty "$old"
	fi
}

__ask() {
	while :; do
		printf '%s' "${1:-'Input Required'} [y/N]: "
		answer=$(__get_ch "${4:-}")
		printf '\n'
		case "$answer" in
		[Yy]*)
			eval "${2:-}"
			break
			;;
		[Nn]*)
			eval "${3:-}"
			break
			;;
		"")
			[ -n "${4:-}" ] && eval "${5:-}"
			break
			;;
		esac
	done
}

add_bigbluebutton_rules() {
	sudo iptables -A OUTPUT -p udp -m udp --dport 3478 -j ACCEPT
}

add_bittorrent_rules() {
	for i in 6969 6881:6889 8999 51413; do
		sudo iptables -A OUTPUT -p tcp -m tcp --dport "$i" -j ACCEPT
		sudo iptables -A OUTPUT -p udp -m udp --dport "$i" -j ACCEPT
	done
}

add_blizzard_rules() {
	for i in 1119 3724 4000 6012 6112:6114; do
		sudo iptables -A OUTPUT -p tcp -m tcp --dport "$i" -j ACCEPT
		sudo iptables -A OUTPUT -p udp -m udp --dport "$i" -j ACCEPT
	done
}

add_minecraft_rules() {
	for i in 25565 27094; do
		sudo iptables -A OUTPUT -p tcp -m tcp --dport $i -j ACCEPT
	done
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 30000:32000 -j ACCEPT
}

add_printing_rules() {
	for i in 161 515 631; do
		sudo iptables -A OUTPUT -p tcp -m tcp --dport "$i" -j ACCEPT
	done
}

add_openvpn_rules() {
	for i in tcp udp; do
		sudo iptables -A OUTPUT -p $i -m $i --dport 1194 -j ACCEPT
	done
}

add_outbound_ssh() {
	__ask 'Does this computer need outbound ssh access?' \
		'sudo iptables -A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT'
}

add_ryzom_rules() {
	for i in 40916 43434 48851:48860 50000; do
		sudo iptables -A OUTPUT -p tcp -m tcp --dport $i -j ACCEPT
	done
	sudo iptables -A OUTPUT -p udp -m udp --dport 47851:47860 -j ACCEPT
}

add_twitch_rules() {
	for i in tcp udp; do
		sudo iptables -A OUTPUT -p $i -m $i --dport 1935 -j ACCEPT
	done
}

add_workstation_rules() {

	# Allow ping
	sudo iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT  # echo reply
	sudo iptables -A INPUT -p icmp --icmp-type 3 -j ACCEPT  # unreachable
	sudo iptables -A INPUT -p icmp --icmp-type 11 -j ACCEPT # time exceeded
	sudo iptables -A INPUT -p icmp --icmp-type 12 -j ACCEPT # parameter problem
	sudo iptables -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT # echo request

	# Allow needed workstation outbound access
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT    # SSH
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 43 -j ACCEPT    # WHOIS
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 53 -j ACCEPT    # DNS (XFR)
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 873 -j ACCEPT   # RSYNC
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 6697 -j ACCEPT  # IRC
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 8448 -j ACCEPT  # Matrix
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 11371 -j ACCEPT # HKPS
	sudo iptables -A OUTPUT -p udp -m udp --dport 59999 -j ACCEPT # MOSH
	__ask 'Network printing?' add_printing_rules
	__ask 'BigBlueButton?' add_bigbluebutton_rules
	__ask 'Discord?' \
		'sudo iptables -A OUTPUT -p udp -m udp --dport 50000:50025 -j ACCEPT'
	__ask 'Gemini?' \
		'sudo iptables -A OUTPUT -p tcp -m tcp --dport 1965 -j ACCEPT'
	# https://support.google.com/a/answer/1279090
	__ask 'Google Duo?' \
		'sudo iptables -A OUTPUT -d 74.125.250.0/24,142.250.82.0/24 -p udp -m udp --dport 19302:19309 -j ACCEPT'
	__ask 'Streaming on Twitch.tv?' add_twitch_rules
	__ask 'Accessing MongoDB?' \
		'sudo iptables -A OUTPUT -p tcp -m tcp --dport 27017 -j ACCEPT'
	__ask 'Accessing ProxMox?' \
		'sudo iptables -A OUTPUT -p tcp -m tcp --dport 8006 -j ACCEPT'
	__ask 'Accessing Remote Desktop (RDP)?' \
		'sudo iptables -A OUTPUT -p tcp -m tcp --dport 3389 -j ACCEPT'
	__ask 'Accessing Virtual Network Computing (VNC)?' \
		'sudo iptables -A OUTPUT -p tcp -m tcp --dport 5900 -j ACCEPT'
	__ask 'Accessing vSphere?' \
		'sudo iptables -A OUTPUT -p tcp -m tcp --dport 9443 -j ACCEPT'
	__ask 'Playing Hack The Box?' \
		'sudo iptables -A OUTPUT -p udp -m udp --dport 1337 -j ACCEPT'
	__ask 'Playing Minecraft?' add_minecraft_rules
	__ask 'Playing Saga of Ryzom?' add_ryzom_rules
	__ask 'Playing Tales of Maj'\''Eyal?' \
		'sudo iptables -A OUTPUT -d angolwen.net-core.org -p tcp -m tcp --dport 2257:2258 -j ACCEPT'
	__ask 'Playing Veloren?' \
		'sudo iptables -A OUTPUT -d server.veloren.net -p tcp -m tcp --dport 14004 -j ACCEPT'
	__ask 'Playing World of Warcraft?' add_blizzard_rules
}

flush_all_rules() {
	# Clear initial rules (set all policies to ACCEPT and delete extra chains)
	printf 'Flushing iptables\n'
	sudo iptables -P INPUT ACCEPT
	sudo iptables -P FORWARD ACCEPT
	sudo iptables -P OUTPUT ACCEPT
	sudo iptables -F
	sudo iptables -X

	if [ -x "$(command -v ip6tables)" ]; then
		printf 'Flushing ip6tables\n'
		sudo ip6tables -P INPUT ACCEPT
		sudo ip6tables -P FORWARD ACCEPT
		sudo ip6tables -P OUTPUT ACCEPT
		sudo ip6tables -F
		sudo ip6tables -X
	fi
}

save_permanent_iptables() {

	# On an Alpine machine:
	if [ -x "$(command -v rc-service)" ]; then
		sudo rc-service iptables save

	# On an Arch machine:
	elif [ -x "$(command -v pacman)" ] &&
		[ -x "$(command -v iptables-save)" ]; then
		sudo iptables-save | sudo tee /etc/iptables/iptables.rules >/dev/null

	# On a CentOS machine:
	elif [ -x "$(command -v yum)" ] &&
		sudo yum list installed iptables-services >/dev/null 2>&1; then
		sudo service iptables save

	# On a Debian machine:
	elif [ -x "$(command -v dpkg)" ] && dpkg -s iptables-persistent >/dev/null 2>&1; then
		sudo dpkg-reconfigure -y iptables-persistent

	# Otherwise, fail:
	else
		# Warn about non-persistence
		cat <<-EOF

			    $(tput bold && tput setaf 1)WARNING:$(tput sgr0)
			  The applied configuration is NOT PERMANENT across reboots. Please
			  consult your distribution's documentation to determine how best to
			  persist these rules. Suggested tools include iptables-persistent,
			  iptables-save, or iptables-services.

		EOF
	fi

}

main() {
	# Sanity check
	if [ ! -x "$(command -v iptables)" ]; then
		printf 'Do you have iptables installed?\n'
		exit 127
	fi

	# firewalld sanity check
	if [ -x "$(command -v firewall-cmd)" ]; then
		printf 'firewalld conflicts with these settings.\n'
		__ask 'Abort setting up iptables?' 'exit 1'
	fi

	# nftables sanity check
	if [ -x "$(command -v nft)" ]; then
		printf 'You have nftables installed. It supercedes iptables.\n'
		__ask 'Abort setting up iptables?' 'exit 1'
	fi

	# sudo check
	if [ ! -x "$(command -v sudo)" ]; then
		printf '%s\n' "This script requires sudo." >&2
		exit 127
	fi

	# Don't run with sudo! Need to preserve $SSH_CLIENT in some situations
	if [ "$(id -u)" -eq 0 ] && [ -n "$SUDO_COMMAND" ]; then
		printf 'Do not run this as root (sudo); it invokes sudo as required.\n'
		exit 1
	fi

	# Find necessary information
	_NETS="$(ip a | grep 'inet ' | grep -v 'inet 127\.' |
		sed 's/  //g; s/inet //g; s/ .*//g')"

	if [ -n "${SSH_CLIENT:-}" ]; then
		SSH_ADDR="$(echo "$SSH_CLIENT" | cut -d' ' -f1)"
	fi

	# Ensure iptables service is running
	# If this is an Alpine system, don't start iptables until the end
	[ -x "$(command -v systemctl)" ] && sudo systemctl restart iptables

	flush_all_rules

	# The "BASE" chain will be used to hold rules applied to all other chains
	sudo iptables -N BASE
	sudo iptables -A INPUT -j BASE
	sudo iptables -A FORWARD -j BASE
	sudo iptables -A OUTPUT -j BASE

	# Drop invalid connections
	sudo iptables -A BASE -m state --state INVALID -j DROP

	# Allow established connections
	sudo iptables -A BASE -m state --state ESTABLISHED,RELATED -j ACCEPT

	# Allow loopback in and out
	sudo iptables -A BASE -i lo -o lo -j ACCEPT
	sudo iptables -A BASE -s 127.0.0.0/8 -d 127.0.0.0/8 -j ACCEPT

	# Jump back after the base chain
	sudo iptables -A BASE -j RETURN

	# Anti-lockout rule (allow SSH from current connection)
	[ -z "${SSH_ADDR+x}" ] || sudo iptables -A INPUT -s "$SSH_ADDR" -p tcp \
		-m tcp --dport 22 -j ACCEPT

	for _NET in $_NETS; do
		_ADDR="${_NET%%/*}"
		# Prevent host spoofing
		sudo iptables -A INPUT -s "$_ADDR" -j DROP
		sudo iptables -A OUTPUT -d "$_ADDR" -j DROP

		# Allow DHCP for faster renewals
		sudo iptables -A INPUT -s "$_NET" -p udp -m udp --sport 67 -m udp \
			--dport 68 -j ACCEPT

		# Allow mDNS for zeroconf
		sudo iptables -A INPUT -s "$_NET" -p udp -m udp --dport 5353 -j ACCEPT
		sudo iptables -A OUTPUT -d "$_NET" -p udp -m udp --dport 5353 -j ACCEPT

		# Allow Mosh
		sudo iptables -A INPUT -s "$_NET" -p udp -m udp --dport 59999 -j ACCEPT

		# Allow ping
		sudo iptables -A INPUT -s "$_NET" -p icmp --icmp-type 8 -j ACCEPT  # req
		sudo iptables -A OUTPUT -d "$_NET" -p icmp --icmp-type 0 -j ACCEPT # rep

		# Allow ssh
		sudo iptables -A INPUT -s "$_NET" -p tcp -m tcp --dport 22 -j ACCEPT
	done

	# mDNS
	sudo iptables -A INPUT -d 224.0.0.251 -p udp -m udp --dport 5353 -j ACCEPT
	sudo iptables -A OUTPUT -d 224.0.0.251 -p udp -m udp --dport 5353 -j ACCEPT

	# Uncomment the lines below as needed to make services available
	# sudo iptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT # SSH (DANGER)
	# sudo iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT # DNS
	# sudo iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT # HTTP
	# sudo iptables -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT # HTTPS
	# sudo iptables -A INPUT -p udp -m udp --dport 443 -j ACCEPT # HTTP/2
	# sudo iptables -A INPUT -p tcp -m tcp --dport 8123 -j ACCEPT # Dynmap
	# sudo iptables -A INPUT -p tcp -m tcp --dport 25565 -j ACCEPT # Minecraft
	# sudo iptables -A INPUT -p udp -m udp --dport 59999 -j ACCEPT # MOSH (DANGER)
	# sudo iptables -A INPUT -p tcp -m tcp --dport 8999 -j ACCEPT # BitTorrent
	# sudo iptables -A INPUT -p udp -m udp --dport 8999 -j ACCEPT # BitTorrent

	# Allow required services outbound (TCP)
	# sudo iptables -A OUTPUT -p tcp -m tcp --dport 53 -j ACCEPT # DNS (XFR)
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT  # HTTP
	sudo iptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT # HTTPS

	# Allow required services outbound (UDP)
	sudo iptables -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT  # DNS
	sudo iptables -A OUTPUT -p udp -m udp --dport 443 -j ACCEPT # HTTP/2
	sudo iptables -A OUTPUT -p udp -m udp --dport 123 -j ACCEPT # NTP

	# Allow BitTorrent?
	__ask 'Allow BitTorrent?' add_bittorrent_rules

	# Allow OpenVPN outbound?
	__ask 'Does this computer use OpenVPN?' add_openvpn_rules

	# Allow WireGuard outbound?
	__ask 'Does this computer use WireGuard?' \
		'sudo iptables -A OUTPUT -p udp -m udp --dport 51820 -j ACCEPT'

	# Workstation?
	__ask 'Is this machine a workstation?' \
		add_workstation_rules add_outbound_ssh

	# Set default policy for all chains to DROP
	sudo iptables -P INPUT DROP
	sudo iptables -P FORWARD DROP
	sudo iptables -P OUTPUT DROP

	# Also drop IPv6
	if [ -x "$(command -v ip6tables)" ]; then
		sudo ip6tables -F
		sudo ip6tables -P INPUT DROP
		sudo ip6tables -P FORWARD DROP
		sudo ip6tables -P OUTPUT DROP
	fi

	# "Cleverness" https://unix.stackexchange.com/a/104361
	sleep 1
	__ask 'Still connected?' "printf 'Rules confirmed.\n'" \
		flush_all_rules 100 flush_all_rules

	# Show the result
	printf '\n\e[1;32m%s\e[0m\n\n' "IPTables rules implemented:"
	sudo iptables -L -n | sed 's/^/  /'
	printf '\n'

	# Make rules persistent
	__ask 'Save rules persistently?' save_permanent_iptables
	# Alpine only: actually start the service
	[ -x "$(command -v rc-service)" ] && sudo rc-service iptables restart

	# Start iptables at boot
	if [ -x "$(command -v systemctl)" ]; then
		__ask 'Start iptables at boot?' 'sudo systemctl enable iptables'
	elif [ -x "$(command -v rc-update)" ]; then
		__ask 'Start iptables at boot?' 'sudo rc-update add iptables'
	fi
}

[ "$#" -gt 0 ] && usage
main
