#!/usr/bin/env bash

# Bash strict mode (https://github.com/alphabetum/bash-boilerplate)
set -eEuo pipefail
trap 'echo "Aborting (errexit line $LINENO). Exit code: $?" >&2' ERR
IFS=$'\n\t'

add_openvpn_rules() {
	sudo nft add rule ip filter output tcp dport openvpn accept
	sudo nft add rule ip filter output udp dport openvpn accept
}

save_permanent_nftables() {
	sudo cp /etc/nftables.conf /etc/nftables.conf.bak
	printf '%s\n\n' "#!/usr/bin/nft -f" | sudo tee /etc/nftables.conf >/dev/null
	sudo nft list ruleset | sudo tee -a /etc/nftables.conf >/dev/null
	printf '%s\n' "Configuration saved."
}

main() {
	# Sanity check
	if [ ! -x "$(command -v nft)" ]; then
		printf '%s\n' "Do you have nftables installed?" >&2
		exit 127
	fi

	# Sudo check
	if [ ! -x "$(command -v sudo)" ]; then
		printf '%s\n' "This script requires sudo." >&2
		exit 127
	fi

	# Don't run with sudo! Need to preserve $SSH_CLIENT in some situations
	if (( "$(id -u)" == 0 )) && [ ! -z "$SUDO_COMMAND" ]; then
		printf '%s\n' "Don't run this script with sudo; it will invoke sudo as required."
		exit 1
	fi

	# Find necessary information
	local INTERFACE
	INTERFACE="$(ip route | grep default | awk '{print $5}')" # Main interface
	local INTRANET
	INTRANET="$(ip addr | grep "$INTERFACE" | awk 'FNR==2{print $2}')" # Intranet
	local INTRANET_ADDR
	INTRANET_ADDR="$(printf '%s' "$INTRANET" | awk -F/ '{print $1}')"
	if [ ! -z "${SSH_CLIENT+x}" ]; then
		local SSH_ADDR
		SSH_ADDR="$(echo "$SSH_CLIENT" | cut -d' ' -f1)"
	fi

	# Ensure nftables service is running
	if [ -x "$(command -v systemctl)" ]; then
		sudo systemctl restart nftables
	fi

	# Clear initial rules
	sudo nft flush ruleset
	sudo nft add table ip filter
	sudo nft add chain ip filter input \{ type filter hook input priority 0\; \}
	sudo nft add chain ip filter forward \{ type filter hook forward priority 0\; \}
	sudo nft add chain ip filter output \{ type filter hook output priority 0\; \}

	# The "base" chain will be used to hold rules applied to all other chains
	sudo nft add chain ip filter base
	sudo nft add rule ip filter input jump base
	sudo nft add rule ip filter forward jump base
	sudo nft add rule ip filter output jump base

	# Anti-lockout rule (allow SSH from current connection)
	[ ! -z "${SSH_ADDR+x}" ] && sudo nft add rule ip filter input ip saddr \
		"$SSH_ADDR" tcp -m dport ssh accept

	# Set default policy for all chains to DROP
	sudo nft add chain ip filter input \{ policy drop\; \}
	sudo nft add chain ip filter forward \{ policy drop\; \}
	sudo nft add chain ip filter output \{ policy drop\; \}

	# Also drop IPv6
	sudo nft add table ip6 filter
	sudo nft add chain ip6 filter input \{ type filter hook input priority 0\; policy drop\; \}
	sudo nft add chain ip6 filter forward \{ type filter hook forward priority 0\; policy drop\; \}
	sudo nft add chain ip6 filter output \{ type filter hook output priority 0\; policy drop\; \}

	# Drop invalid connections
	sudo nft add rule ip filter base ct state invalid drop

	# Allow established connections
	sudo nft add rule ip filter base ct state \{ established, related \} accept

	# Allow loopback in and out to itself
	sudo nft add rule ip filter base meta iif lo oif lo accept
	sudo nft add rule ip filter base ip saddr 127.0.0.0/8 ip daddr 127.0.0.0/8 accept

	# Prevent host spoofing
	sudo nft add rule ip filter input ip saddr "$INTRANET_ADDR" drop
	sudo nft add rule ip filter forward ip saddr "$INTRANET_ADDR" drop
	sudo nft add rule ip filter forward ip daddr "$INTRANET_ADDR" drop
	sudo nft add rule ip filter output ip daddr "$INTRANET_ADDR" drop

	# Allow DHCP from intranet for faster renewals
	sudo nft add rule ip filter input ip saddr "$INTRANET" udp sport bootps udp dport bootpc accept

	# Allow mDNS from intranet for zeroconf
	sudo nft add rule ip filter input ip saddr "$INTRANET" udp dport mdns accept

	# Allow ping to and from intranet
	sudo nft add rule ip filter output ip protocol icmp ip saddr "$INTRANET" icmp type \
		\{ echo-request, echo-reply \} accept
	sudo nft add rule ip filter input ip protocol icmp ip saddr "$INTRANET" icmp type \
		\{ echo-request, echo-reply, time-exceeded, parameter-problem, \
		destination-unreachable \} accept

	# Uncomment the lines below as needed to make services available
	# sudo nft add rule ip filter input ip saddr "$INTRANET" tcp dport ssh accept # SSH
	# sudo nft add rule ip filter input tcp dport ssh accept # SSH (DANGER)
	# sudo nft add rule ip filter input tcp dport http accept # HTTP
	# sudo nft add rule ip filter input tcp dport https accept # HTTPS
	# sudo nft add rule ip filter input udp dport https accept # HTTP/2
	# sudo nft add rule ip filter input tcp dport 25565 accept # Minecraft
	# sudo nft add rule ip filter input ip saddr "$INTRANET" -p tcp dport 8123 accept # Dynmap
	# sudo nft add rule ip filter input tcp dport 8123 accept # Dynmap (DANGER)

	# Allow printing to intranet
	sudo nft add rule ip filter output ip daddr "$INTRANET" tcp dport snmp accept
	sudo nft add rule ip filter output ip daddr "$INTRANET" tcp dport 515 accept
	sudo nft add rule ip filter output ip daddr "$INTRANET" tcp dport ipp accept

	# Allow required services outbound
	sudo nft add rule ip filter output tcp dport \{ http, https, rsync, ssh, whois \} accept
	sudo nft add rule ip filter output udp dport \{ domain, https, ntp \} accept

	# Allow Minecraft outbound?
	while true; do
		read -r -p "Is this computer used to play Minecraft? [y/N]: " -n 1 mc
		printf '\n'
		case $mc in
			[Yy]* ) sudo nft add rule ip filter output tcp dport \{ 25565, 27094 \} accept; break;;
			[Nn]* ) break;;
			"" ) break;;
		esac
	done

	# Allow OpenVPN outbound?
	while true; do
		read -r -p "Does this computer use OpenVPN? [y/N]: " -n 1 ov
		printf '\n'
		case $ov in
			[Yy]* ) add_openvpn_rules; break;;
			[Nn]* ) break;;
			"" ) break;;
		esac
	done

	# Allow ProxMox outbound?
	while true; do
		read -r -p "Is this computer used to access ProxMox? [y/N]: " -n 1 ov
		printf '\n'
		case $ov in
			[Yy]* ) sudo nft add rule ip filter output tcp dport 8006 accept; break;;
			[Nn]* ) break;;
			"" ) break;;
		esac
	done

	# Allow vSphere outbound?
	while true; do
		read -r -p "Is this computer used to access vSphere? [y/N]: " -n 1 vs
		printf '\n'
		case $vs in
			[Yy]* ) sudo nft add rule ip filter output tcp dport 9443 accept; break;;
			[Nn]* ) break;;
			"" ) break;;
		esac
	done

	# Show the result
	printf '\n\e[1;32m%s\e[0m\n\n' "NFT rules implemented:"
	sudo nft list ruleset
	printf '\n'

	# Save to /etc/nftables.conf
	while true; do
		read -r -p "Save to /etc/nftables.conf? [y/N]: " -n 1 yn
		printf '\n'
		case $yn in
			[Yy]* ) save_permanent_nftables; break;;
			[Nn]* ) break;;
			"" ) break;;
		esac
	done

	# Start nftables at boot
	if [ -x "$(command -v systemctl)" ]; then
		while true; do
			read -r -p "Start nftables at boot? [y/N]: " -n 1 yn
			printf '\n'
			case $yn in
				[Yy]* ) sudo systemctl enable nftables; break;;
				[Nn]* ) break;;
				"" ) break;;
			esac
		done
	fi
}

main "$@"
