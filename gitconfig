# vim: set ft=gitconfig:
[user]
	name = Stick
	email = nstickney@pm.me
	signingkey = 1FEE51A9DEDCCD04A30356F1BCB707F25AD86199
[credential]
	helper = cache --timeout=3600
[core]
	autocrlf = input
    excludesfile = ~/dotfiles/gitignore
[commit]
	gpgsign = true
[alias]
	# Add All
	AA = ! git add -A && git ST
	# Add Patches
	AP = ! git add -p && git ST
	# Amend Commit
	AC = commit --amend
	# BRanch
	BR = branch
	# Commit and write the message in Editor
	CE = commit
	# Commit with Message (requires message argument)
	CM = commit -m
	# CLone
	CL = clone
	# CheckOut
	CO = checkout
	# Clone with Submodules
	CS = clone --recurse-submodules --jobs 8
	# Fetch All
	FA = fetch --all
	# Fire Drill
	FD = ! git add -A && git commit -m 'wip: fire drill!' && git push
	# Fetch all with Submodules
	FS = fetch --all --recurse-submodules --jobs 8
	# Last Commit
	LC = log -1 HEAD
	# List Ignored
	LI = ls-files --others -i --exclude-standard
	# Push (Force)
	PF = push -f origin master
	# Pull Origin
	PO = pull origin master
	# PuSh
	PS = push
	# Pull Upstream
	PU = pull upstream master
	# Pull (Recurse)
	PR = pull --recurse-submodules -r origin master
	# Repo Clean (removes a file or set of files from all commits in a repo)
	RC = "!f(){ git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch '\"$*\" --prune-empty --tag-name-filter cat -- --all && git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin; git reflog expire --expire=now --all && git gc --prune=now; }; f"
	# Remove (Force)
	RF = "!f(){ git rm -rf \"$*\" && git status; }; f"
	# Rebase Interactively
	RI = rebase -i
	# Rebase Origin
	RO = "!f(){ git fetch origin && git rebase origin/master; }; f"
	# Rebase Upstream
	RU = "!f(){ git fetch upstream && git rebase upstream/master; }; f"
	# Stash Add
	SA = stash
	# Stash Pop
	SP = stash pop
	# SQuash
	SQ = ! git commit --squash=HEAD && git rebase --autosquash
	# Shrink Repo
	SR = ! git reflog expire --expire=now --all && git gc --prune=now --aggressive
	# STatus
	ST = status -sb
	# Submodule Update
	SU = submodule update --init --recursive --remote --jobs 8
	# TableFlip (start over from whatever is in the remote)
	TF = "!f(){ read -r -p 'Throw it all away? [y/N]: ' -n 1 yn; printf '\n'; case $yn in [Yy]* ) git fetch --all --force --jobs 8 && git reset --hard origin/\"$(git rev-parse --abbrev-ref HEAD)\" && git clean -dfx; break;; * ) break;; esac; }; f"
	# Track Master (force local branch to track origin/master)
	TM = branch -u origin/master
	# Undo changes
	UC = clean -dfi
	# Un-stage
	US = reset HEAD --
