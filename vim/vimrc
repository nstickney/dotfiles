""" http://marcgg.com/blog/2016/03/01/vimrc-example/
""" https://github.com/skwp/dotfiles/blob/master/vimrc
""" http://www.guillaume-barillot.com/2017/06/09/how-to-to-make-vim-to-look-like-atom/

" Basics
set nocompatible                        " use vim settings instead of vi (must be first)
set autoread                            " automatically reload files changed outside vim
set backspace=indent,eol,start whichwrap+=<,>,[,]   " backspace/cursor keys wrap lines
set colorcolumn=80,90,100,120           " add markers to determine line length
hi ColorColumn ctermbg=0                " set the color column to dark grey
set history=1000                        " store lots of history
set mouse=a                             " make the dadgum mouse work
set showmatch                           " highlight matching [{()}]
set showcmd                             " show commands in bottom bar

" Buffers
set hidden                              " buffers can exist without being in a window
nnoremap <C-T> :bnext<CR>               " move to next buffer
nnoremap <C-G> :bprev<CR>               " move to previous buffer

" Clipboard
set clipboard=unnamed                   " use the copy-on-select clipboard
"set clipboard=unnamedplus              " use the system clipboard

" Encoding (set to UTF-8 where available)
if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   	set fileencodings=ucs-bom,utf-8,latin1
endif

" Eye Candy
hi Normal guibg=NONE ctermbg=NONE       " transparent background
set t_Co=16                             " use (only) the 16 basic terminal colors

" Faster
set lazyredraw                          " redraw only as needed
set ttyfast                             " faster redraw

" Folding
set foldmethod=indent                   " fold based on indent
set foldnestmax=3                       " deepest fold is 3 levels
set nofoldenable                        " don't fold by default

" Indentation
nnoremap p p=`]<C-o>                    " auto-indent pasted text
nnoremap P P=`]<C-o>                    " auto-indent pasted text
nnoremap <Leader><tab> <esc>gg=G<C-o><C-o>zz    " auto-indent entire file
set autoindent
set cindent
set cinoptions=(0,u0,U0
set noexpandtab                         " indent with tabs, align with spaces
set copyindent
set preserveindent
set smarttab
set tabstop=4                           " tabs are four characters wide
set shiftwidth=4
set softtabstop=4
set list lcs=tab:\│\                    " indentation guide character
hi SpecialKey ctermfg=0                 " indentation guide color
let g:indentLine_char = '┆'             " soft tab indentation guide character
let g:indentLine_color_term=0           " soft tab indentation guide color

" Line Numbers
hi LineNr ctermfg=0                     " set the line numbers color to dark grey
set cursorline                          " highlight current line
hi CursorLine cterm=None                " don't highlight the entire line
hi CursorLineNr ctermfg=8               " set the current line number color to grey

"" @cur33's Line Numbers function
function! LineNumberToggle()
	if(&relativenumber != 1)
		set number!
	endif
	set relativenumber!
endfunc
nnoremap <C-n> :call LineNumberToggle()<cr>
call LineNumberToggle()

" Linting (ALE)
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%severity%][%linter%]% code:% %s'
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
hi SignColumn ctermbg=None

" Miscellaneous
let g:vim_markdown_conceal=0            " turn off conceal in Markdown

" Scrolling
set scrolloff=8                         " start scrolling 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" Searches
set hlsearch                            " highlight searches
set ignorecase                          " ignore case searching
set incsearch                           " search as you type
set smartcase                           " stop ignoring case if a capital is typed
if executable('rg')                     " use ripgrep if available
	let g:ackprg = 'rg --vimgrep'
endif

" Spellcheck
set spelllang=en_us                     "
set spellfile=$HOME/dotfiles/vim/stick.utf-8.add
set spell
hi clear SpellBad
hi SpellBad cterm=underline

" Status (lightline + lightline-ale)
set laststatus=2
set noshowmode
let g:lightline = {
			\ 'component_expand': {
			\ 'buffers': 'lightline#bufferline#buffers',
			\ 'linter_checking': 'lightline#ale#checking',
			\ 'linter_warnings': 'lightline#ale#warnings',
			\ 'linter_errors': 'lightline#ale#errors',
			\ 'linter_ok': 'lightline#ale#ok'
			\ },
			\ 'component_type': {
			\ 'buffers': 'tabsel',
			\ 'linter_checking': 'left',
			\ 'linter_warnings': 'warning',
			\ 'linter_errors': 'error',
			\ 'linter_ok': 'left'
			\ },
			\ 'active': {
			\ 'left': [[ 'mode', 'paste' ],
			\ [ 'filename', 'readonly', 'modified' ]],
			\ 'right': [[ 'lineinfo' ],
			\ [ 'percent' ],
			\ [ 'linter_checking', 'linter_warnings', 'linter_errors', 'linter_ok' ]]
			\ },
			\}
let g:lightline.separator = {
	\   'left': '', 'right': ''
  \}
let g:lightline.subseparator = {
	\   'left': '', 'right': ''
  \}
let g:lightline.tabline = {
  			\   'left': [ ['buffers'] ],
  			\   'right': [ ['fileformat', 'fileencoding', 'filetype'] ],
  			\ }
set showtabline=2  " Show tabline
let g:lightline#ale#indicator_checking = "..."
let g:lightline#ale#indicator_warnings = "?"
let g:lightline#ale#indicator_errors = "!"
let g:lightline#ale#indicator_ok = ""

" sudo
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Swap files (backup, swap files written in /tmp)
set backupdir=/tmp//                    " stored by full file path in /tmp
set directory=/tmp//                    " stored by full file path in /tmp
set wb                                  " backups are written before actual writes

" Syntax Highlighting
filetype plugin on                      " detect file type from file name extensions
filetype indent on                      " indent based on detected file type
syntax on                               " use syntax highlighting for detected file type

" Undo
set undodir=/tmp//                      " stored by full file path in /tmp
set undofile                            " enable persistent undo

" Visual Wrapping
set wrap linebreak

" Wildcards
set wildmode=list:longest               " wildmenu behaves like bash completion
set wildmenu                            " ctrl-n and ctrl-p scroll thru matches
set wildignore=*.o,*.obj,*~             " stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
